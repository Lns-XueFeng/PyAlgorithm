"""
author: Lns-XueFeng
CreateTime: 2023.03.01
"""


"""
当学习了数据结构与算法后，尽量以学过的这些数据结构与算法出发来构建规范的清晰的解决问题的方法
在计算机中一切都是数据，只有将问题中涉及到的数据选用到合适的数据结构，才能简化问题的难度

记住测试用例，就像每一个OJ题均给出了不同输出的测试用例
"""


"""源自《C Primer Plus》
这里进行了稍微的改动，并且只全面的写出了前两步，原因见本段最后。

1.*定义程序的目标：
    在动手写程序之前，要在脑中有清晰的思路。想要程序去做什么首先自己要明确自己想做什么，
    思考你的程序需要哪些信息，要进行那些计算和控制，以及程序应该要报告什么信息。
    在这一步中，不涉及具体的计算机语言，应该用一般术语来描述问题。
2.*设计程序：
    对程序应该完成什么任务有概念性的认识后，就应该考虑如何用程序来完成它。
    例如，用户界面应该是怎样的？如何组织程序？目标用户是谁？准备花多长时间来完成这个程序？
    除此之外，还要决定在程序（还可能是辅助文件）中如何表示数据，以及用什么方法处理数据。
    学习编程语言之初，遇到的问题都很简单，没什么可选的。但是随着要处理的情况越来越复杂，遇到决策和考虑的方面也越来越多。
    通常，选择一个合适的方式来表示信息可以更容易的设计程序和处理数据。
    再次强调，应该用一般术语来描述问题，而不是用具体的代码。
    但是，你的某些决策可能取决于语言的特性。例如，在数据表示方面，C的程序员就比Pascal的程序员有更多选择。
3.编写代码：
    设好程序后，就可以编写代码来实现它。也就是说，把你设计的程序翻译成编程语言。
    这个地方才是真正需要使用编程语言的地方。可以把思路写在纸上，但最终还是要把代码输入计算机。
4.编译
5.运行程序
6.*测试和调试程序
7.*维护和修改代码

编程并非像描述那样是一个线性的过程。有时需要在不同的步骤之间往复。
例如，在写代码时发现之前的设计不切实际，或者想到了一个更好的解决方案，或者等程序运行后，想改变原来的设计思路。
    
许多初学者经常忽略第一和第二步（定义程序目标和设计程序），直接跳到第三步（编写代码）。
刚开始学习时，编写的程序非常简单，完全可以在脑中构思好整个过程。即使写错了，也很容易发现。
但是，随着编写的程序越来越庞大、越来越复杂，动脑不动手课可不行，而且程序中隐藏的错误也越来越难找。
最终，那些跳过前两个步骤的人往往浪费了更多的时间，因为它们写出的程序难看、缺乏条理、让人难以理解。
要编写的程序越来越大，事先定义和设计程序环境的工作量就越大。
磨刀不误砍柴工。应该养成先规划再动手编写代码的好习惯，用纸和笔记录下程序的目标和设计框架。
这样在编写代码的过程中会更加得心应手，条理清晰。
"""


"""
学完Chapter2以及Chapter3
会发现其中大部分ADT是利用了Python提供的基本数据类型列表来进行实现的
以此实现的ADT让我们能够更有效的方便的解决问题

但别忘了Python还有字典以及元组，基于它们能做些什么抽象呢？
不知道没关系，因为Python已经为我们提供了很多基于它们的ADT抽象数据类型
如下：
['deque', 'defaultdict', 'namedtuple', 'UserDict', 'UserList',
'UserString', 'Counter', 'OrderedDict', 'ChainMap']
其中有基于列表的，有基于元组的，有基于字典的...还有些基于别的的...
现在，我们仅仅知道Python为我们实现了很多实用的ADT就行
"""


"""顺序存储与链式存储
实现栈，队列，双端队列均是使用列表来实现的，实际上这是对应了”顺序存储“
还有一种方式，比如无序表，有序表是用链表来实现的，它实际上对应了”链式存储“

可见实现某种数据结构是可以考虑使用”顺序存储“还是”链式存储“的，它们各有各的优点！
比如栈，队列，双端队列同样可以利用链表来实现，UnOrderList，OrderList亦可以利用”顺序存储“
本质上是其数据对应的内存中的组织方式不同，”顺序存储“是一片连续的内存空间，因此可以”随机存取“，而”链式存储“则是不连续的内存空间，因此只能”顺序存取“
Python列表的底层是由C的数组实现的（变长数组），且C的数组是申请一片连续的内存空间，因此Python的列表是”顺序存储“
则利用列表实现的栈，队列，双端队列在内存中都是”顺序存储“结构。而无序表，有序表则是利用链表实现的，则其在内存中是“链式存储”

“顺序存储”和“链式存储”都能实现各种数据结构，比如栈，队列，树，图等
"""


"""递归、递推与回溯
"""
